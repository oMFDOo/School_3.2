from skimage.io import imread
from skimage.color import rgb2gray
from skimage import filters, feature
import numpy as np
import matplotlib.pylab as pylab
from scipy import signal, ndimage

#%% gradient , direction of edge
ker_x = [[-1, 1]]
ker_y = [[-1], [1]]

ker_x = [[-1, 0, 1], [-2, 0, 2], [-1, 0, 1] ]
ker_y = [[-1, -2, -1], [0, 0, 0], [1, 2, 1] ]

ker_lp = [[0,-1,0],[-1, 4, -1],[0,-1,0]]

im = rgb2gray(imread('./images/chess.png'))
#im = rgb2gray(imread('./images/tiger3.jpg'))

im_x = signal.convolve2d(im, ker_x, mode='same')
im_y = signal.convolve2d(im, ker_y, mode='same')
im_lp = signal.convolve2d(im, ker_lp, mode='same')

# im_x = np.clip(signal.convolve2d(im, ker_x, mode='same'), 0, 1)
# im_y = np.clip(signal.convolve2d(im, ker_y, mode='same'), 0, 1)
# im_lp = np.clip(signal.convolve2d(im, ker_lp, mode='same'), 0, 1)

im_mag = np.sqrt(im_x**2 + im_y**2)
im_dir = np.arctan(im_y/im_x)

pylab.figure(figsize=(30,20))
pylab.subplot(231), pylab.imshow(im, cmap='gray'), pylab.title('original')
pylab.subplot(232), pylab.imshow(im_x, cmap='gray'), pylab.title('grad_x')
pylab.subplot(233), pylab.imshow(im_y, cmap='gray'), pylab.title('grad_y')
pylab.subplot(234), pylab.imshow(im_mag, cmap='gray'), pylab.title('mag')
pylab.subplot(235), pylab.imshow(im_dir, cmap='gray'), pylab.title(r'$\theta$')
#pylab.subplot(236), pylab.imshow(im_lp, cmap='gray'), pylab.title('laplacian')

ima = np.zeros((im.shape[0],im.shape[1],3))
ima[...,0] = np.abs(np.sin(im_dir))
ima[...,1] = np.abs(np.cos(im_dir))
pylab.subplot(236), pylab.imshow(ima), pylab.title(r'||grad||+$\theta$')

#%% Edge Detector

im = rgb2gray(imread('./images/goldengate.jpg'))
#im = ndimage.gaussian_filter(im, 3)
#im  = filters.gaussian(im, 1)
im = filters.median(im)
# edges = filters.roberts(im)
# edges = filters.scharr(im)
edges = filters.sobel(im)
# edges = filters.prewitt(im)
# edges = filters.laplace(im)
# edges = np.abs(edges)
# edges = np.clip(edges, 0, 1)

pylab.figure(figsize=(30,20))
pylab.subplot(121), pylab.imshow(im, cmap='gray'), pylab.title('original')
pylab.subplot(122), pylab.imshow(edges, cmap='gray'), pylab.title('original')

#%% LOG with zerocrossing
def zero_cross_detection(image, T=0):
    z_c_image = np.zeros(image.shape)

    for i in range(0,image.shape[0]-1):
        for j in range(0,image.shape[1]-1):
            if image[i][j]*image[i+1][j] < 0 and np.abs( image[i+1][j]-image[i][j] ) > T:
                z_c_image[i,j] = 1
            elif image[i][j]*image[i+1][j+1] < 0 and np.abs( image[i+1][j+1]-image[i][j] ) > T:
                z_c_image[i,j] = 1
            elif image[i][j]*image[i][j+1] < 0 and np.abs( image[i][j+1]-image[i][j] ) > T:
                z_c_image[i,j] = 1
    return z_c_image

im = rgb2gray(imread('./images/goldengate.jpg'))

#im  = filters.gaussian(im, 5)
#edges = filters.laplace(im)
edges = ndimage.gaussian_laplace(im, 5)

#edges = filters.difference_of_gaussians(im, 5.0)

zedges = zero_cross_detection(edges, T=np.max(edges)*0.00)

pylab.figure(figsize=(30,20))
pylab.subplot(131), pylab.imshow(im, cmap='gray'), pylab.title('original')
pylab.subplot(132), pylab.imshow(edges, cmap='gray'), pylab.title('original')
pylab.subplot(133), pylab.imshow(zedges, cmap='gray'), pylab.title('original')

#%% Canny
im = rgb2gray(imread('./images/tiger3.jpg'))
im = ndimage.gaussian_filter(im, 4)
edges = feature.canny(im, sigma=2)

pylab.figure(figsize=(30,20))
pylab.subplot(121), pylab.imshow(im, cmap='gray'), pylab.title('original')
pylab.subplot(122), pylab.imshow(edges, cmap='gray'), pylab.title('original')