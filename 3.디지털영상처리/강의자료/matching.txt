from matplotlib import pylab as pylab
from skimage.io import imread
from skimage.color import rgb2gray
from skimage.feature import corner_harris, corner_subpix, corner_peaks, plot_matches, match_descriptors
from skimage.transform import AffineTransform, warp
from skimage.util import img_as_float
from skimage.measure import ransac
from skimage.transform import AffineTransform

temple = rgb2gray(img_as_float(imread('./images/temple.jpg')))
image_original = temple.copy()
image_original_gray = rgb2gray(image_original)

affine_trans =  AffineTransform(scale=(0.8, 0.9), rotation=0.1, translation=(120, -20))
image_warped = warp(image_original, affine_trans.inverse, output_shape=image_original.shape)
image_warped_gray = rgb2gray(image_warped)

coordinates = corner_harris(image_original_gray, k=0.02)
coordinates[coordinates > 0.01*coordinates.max()] = 1
coordinates_original = corner_peaks(coordinates, threshold_rel=0.05, min_distance=5)
coordinates_original_subpix = corner_subpix(image_original_gray, coordinates_original, window_size=9)

coordinates = corner_harris(image_warped_gray, k=0.02)
coordinates[coordinates > 0.01*coordinates.max()] = 1
coordinates_warped = corner_peaks(coordinates, threshold_rel=0.05, min_distance=5)
coordinates_warped_subpix = corner_subpix(image_warped_gray, coordinates_warped, window_size=9)

matches = match_descriptors(coordinates_original, coordinates_warped, metric='euclidean', cross_check=True)

model, inliers = ransac( (coordinates_original[matches[:, 0]], coordinates_warped[matches[:, 1]]), AffineTransform, min_samples=3, residual_threshold=1, max_trials=100 )

pylab.figure(figsize=(20,15))
ax = pylab.subplot(111)
plot_matches(ax, image_original_gray, image_warped_gray, coordinates_original, coordinates_warped,  matches[inliers], matches_color='b')
ax.axis('off'), ax.set_title('Correct correspondences', size=20)
pylab.show()