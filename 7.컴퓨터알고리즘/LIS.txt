
#include <stack>

void LIS_DP(int A[100], int B[100], int C[100], int n) {
    for (int i = 1; i <= n; i++) {
        B[i] = 1;
        C[i] = -1;
        for (int j = 0; j < i; j++) {
            if (A[j] < A[i] && B[i] < B[j] + 1) {
                B[i] = B[j] + 1;
                C[i] = j;
            }
        }
    }
}


int findLast(int B[100], int n) {
    int max = B[1];
    int idx = 0;
    for (int i = 1; i <= n; i++) {
        if (B[i] > max) {
            max = B[i];
            idx = i;
        }
    }
    return idx;
}


void printLIS(int A[100], int C[100], int m) {
    stack<int> s;
    while (m != -1) {
        s.push(A[m]);
        m = C[m];
    }
    while (!s.empty()) {
        cout << s.top() << " ";
        s.pop();
    }
}
